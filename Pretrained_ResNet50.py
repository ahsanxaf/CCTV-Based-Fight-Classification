# -*- coding: utf-8 -*-
"""FYP3 (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xDSQmZex6LrFp_ohN-G962rzeSA760Gt
"""

import tensorflow as tf
from tensorflow import keras
import keras
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Input, Dense
from keras.applications import resnet
from keras.applications.resnet import preprocess_input

a = tf.test.gpu_device_name()
print(a)

import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf
from keras.models import Sequential
from keras.layers import Dense, Conv2D , MaxPool2D , Flatten , Dropout 
from tensorflow.keras.optimizers import Adam,SGD
from keras.models import *
from keras.layers import *
from keras.optimizers import *
from keras.callbacks import TensorBoard, ModelCheckpoint, LearningRateScheduler, EarlyStopping
from keras.layers import Input
from keras.applications import resnet
from keras.applications.resnet import preprocess_input

import cv2 as cv
import numpy as np
import os
import imutils
import random
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import warnings
warnings.filterwarnings("ignore", category=np.VisibleDeprecationWarning)
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.preprocessing.sequence import pad_sequences
from sklearn import metrics

from google.colab import drive
drive.mount('/content/drive')

cd drive/MyDrive/

directory = r'fight-detection-surv-dataset-master'
CATEGORIES = ['fight', 'noFight']

data = []
labels = []
sample = []
for category in CATEGORIES:
    folder = os.path.join(directory, category)
    label = CATEGORIES.index(category)
    print(folder)
    for frame in os.listdir(folder):
        frm_path = os.path.join(folder, frame)
        cap = cv.VideoCapture(frm_path)
        while cap.isOpened():
            ret, frames = cap.read()
            if ret == True:
                #frames = cv.cvtColor(frames, cv.COLOR_BGR2GRAY)
                frames = cv.resize(frames, (224,224))
                data.append(frames)
                labels.append(category)
            else:
                break

image_shape = np.array(data[0]).shape

image_shape

data = np.array(data)

data.shape

sqz = np.squeeze(data)

from sklearn.model_selection import KFold

# Define the K-fold Cross Validator
kfold = KFold(n_splits=2, shuffle=True)

from sklearn import preprocessing

le = preprocessing.LabelEncoder()
le.fit(labels)
labels = le.transform(labels)

labels.shape

for train, test in kfold.split(data, labels):
    resnet_model = Sequential()

    pretrained_model= tf.keras.applications.ResNet50(include_top=False,
                       input_shape=(224,224,3),
                       pooling='avg',classes=2,
                       weights='imagenet')
    for layer in pretrained_model.layers:
            layer.trainable=True
    resnet_model.add(pretrained_model)

    resnet_model.add(Flatten())
    resnet_model.add(Dense(512, activation='relu'))
    resnet_model.add(Dense(1, activation='sigmoid'))
    resnet_model.compile(optimizer=Adam(learning_rate=0.001),loss='binary_crossentropy',metrics=['accuracy'])
    history = resnet_model.fit(data[train], labels[train], epochs=50, validation_data=(data[test], labels[test]), verbose=True)

arr = resnet_model.predict(data[test])

print(arr)

print(len(arr[arr>0.5]))

resnet_model.evaluate(data[test], labels[test])

resnet_model.summary()

for train, test in kfold.split(data, labels):
  plt.plot(history.history['accuracy'], label='accuracy')
  plt.plot(history.history['val_accuracy'], label = 'val_accuracy')
  plt.xlabel('Epoch')
  plt.ylabel('Accuracy')
  plt.ylim([0.5, 1])
  plt.legend(loc='lower right')

  test_loss, test_acc = resnet_model.evaluate(data[test],  labels[test], verbose=2)

a=res.predict(data)

print(a)

for train, test in kfold.split(data, labels):
  array = res.predict(data[test])

array

len(array[array>0.5])

len(array)

le.inverse_transform(labels)

from keras.models import save_model
resnet_model.save('fight_det_model.h5')

from keras.models import load_model
loaded_model=load_model('fight_det_model.h5')

X_train, X_test, Y_train, Y_test = train_test_split(data, labels, test_size=0.2, random_state=1)

pred = loaded_model.predict(data)
print(len(pred))

from sklearn import metrics
for train, test in kfold.split(data, labels):
  recall_sensitivity = metrics.recall_score(data[test], pred, pos_label=0)
  recall_specificity = metrics.recall_score(Y_test, pred, pos_label=1)
  print(recall_sensitivity, recall_specificity)

from sklearn.metrics import classification_report

test_set = test_datagen.flow_from_directory('/content/drive/fight-detection-surv-dataset-master',
                                          target_size = (320, 320),
                                          batch_size = 1,
                                          class_mode = 'binary')
predictions = loaded_model.predict_generator(
    test_set,
    steps = np.math.ceil(test_set.samples / test_set.batch_size),
    )
predicted_classes = np.argmax(predictions, axis=1)
true_classes = test_set.classes
class_labels = list(test_set.class_indices.keys())
report = classification_report(true_classes, predicted_classes, target_names=class_labels)
accuracy = metrics.accuracy_score(true_classes, predicted_classes)
print(report)